* Nomenclature des fichiers de doc  
- le nom du fichier .pov doit etre le nom du fichier.py + 1 chiffre ( exemple : file.py et file1.pov ou file23.py et file234.pov)
  ou le nom du fichier lui meme (file.py/file.pov)
- le nom du fichier .rst doit etre le nom du fichier.py moins un ou zero caractere ( ex: (file.py et fil.rst ou file.rst),  ou (file1.py et file.rst/file1.rst)
- les fichiers .png et .pov ont meme basename 

* Organisation de chaque fichier
- le fichier python cree le .pov  ( mais pas le  png genere' par make pour plus de souplesse)

- creer le fichier rst  en incluant le .py par des 
paragraphes du type:
    .. literalinclude:: genealogyAndCompounds1.py
         :start-after: bbloc1
	 :end-before: ebloc1

* structure de dependance du make 
- les html dependent des .rst dependent des .py
- les .png dependent des .pov qui dependent des .py

* entretien de la doc existante via le make 

- make pycao pycaofile=file.py : lance python3 sur file.py
- make pngs : lance make sur tous les png trouve's
- make html: lance sphinx 
- make update = make png + make html
- make fromScratch = make pycao sur tous les .py+ make update
- make listmissingpng = cree la liste de png attendus et verifie en bash qu'ils sont plus recents que les pov correspondants.

* Remarques generales

Il y a deux parties tres differentes : 
1 . creer les .png a partir des .py ( pycao) 
2. creer les .html a partir des .rst ( sphinx)

** Partie 1: 
Le pb est la gestion des pov/png. 
- on recompile tout, c'est long ( un peu la creation des .pov, mais surtout les povray)
- mais ca rend la verification difficile car ya trop d'images a verifier possiblement manquantes  (si povray n'est pas content : le png n'est pas cree )
- il peut y avoir plusieurs png pour un .py  et donc c'est pas facile a automatiser dans make


** La partie 2  
Ici, sphinx-build est pas raccord car on le fait avec -E pour inclure les images nouvelles. Il faut remplacer par un touch des .rst correspondant
On peut compiler en local pour verifier 
Ou compiler en global pour installer la doc
La difference ce fait en fonction du fichier  de conf utilis√© et des parametres transmis a sphinx-build
En effet sphinx-build permet de transmettre le directory de depart, celui d'arrivee, et le fichier de conf.
Savoir que les doc-trees permettent des inclusions recursives donc mettre une branche  dans un repertoire separe' 
permet de compiler soit une branche mere qui l'appellera automatiquement via les doctrees. 




