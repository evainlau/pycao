Back to [[file:../pycao.org][the Org file]] 

* Architecture de la documentation

** ce qu'il faut a terme
- un tutoriel (plus ou moins done)
- des exemples (pas trop importan_t, yen a dans le tutoriel)
- un manuel de reference qui comporte
  la liste des classes, des classes derivees, des methodes pour chaques classe avec la doc de chaque classe et de chaque methode
  et un lien vers le code source (auto-documentation)

Pour le tutoriel, il faut pouvoir le verfifier, surtout si on l'etend. Le pb est qu'il y a plusieurs niveaux qui interagissent
( le code html, le code python pour ecrire le programme pycao qui contient lui meme deux sous-niveaux ( le preambule commun a tous
les codes pythons, le preambule/postambule du code python), le fichier povray, l'image.

Regle de base : Premiere idee : tout devrait etre ecrit dans un unique fichier python, sinon c'est pas gerable d'ecrire la doc au quotidien.
Mais cette idee marche mal pour gerer le debug. Alors on fait autrement: on ecrit les fichiers pycao a part, et les fichiers rst vont inclure du
code pycao a l'aide de balises de marquage dans le code pycao. 

Deuxieme regle de base : il faut gerer les dependances automatiquement dans un fichier make car tout recompiler est trop long.
On a la dependance suivante : le fichier rst depend de fichiers pycao.
les fichiers povray dependent aussi des fichiers pycao et les fichiers images dependent des fichiers .pov. 
On peut faire dependre le fichier pycao de fichier preambules.  Pour les rst, il faut faire un "touch" depuis le make pour que sphinx ait
envie de recompiler.  Un truc chiant a reflechir est que sphinx utilise aussi des makefiles donc il ne faut pas trop interferer les makefiles.
Resoudre ce truc chiant avec makefile -f 


Question pas claire : faut-il faire un fichier make a la main ou un fichier make automatise' ?
Je dirais plutot un fichier make a la main. Pas si difficile a gerer : a chaque fois qu'on ajoute de la doc
il suffit d'ajouter une ligne avec un fichiers rst qui depend d'une liste de fichiers pycao en .py
et un .phony fichiersPng qui liste tous les png attendus ( il peut y avoir plusieurs png pour un pycao)
Le reste du fichier make est inchangÃ©.

Le .phony des fichiers png doit faire la liste de tous les fichiers pycao changes et faire un fichier latex qui pour chacun d'eux met
la liste des png correspondant. Puis a la fin, je vois le latex. Si c'est OK, je balance en ligne. 

Methodo de travail:
- je modifie un povray, je take make png, il me fait les png et les mets dans un fichier tex et m'affiche ce tex, ne touche pas aux .rst correspondants
- si c'est OK pour les dessins, je build les rst. Pour cela,  "make rst" va deplacer les .png nouvellements crees, faire un touch des .rst correspondants, et appeller sphinx-build 



* Generating the Doc
====================

** General procedure: 
-------------------------------
   + create images
   + create html

To create images, the script ./buildImages.py collects the .py
files in this directory and executes them : this creates the 
povray file and calls povray.  

The verbosity of povray generates a much too large output
to check that the python compilation was OK.
However, don't care. 
If some file is not generated, then it will not appear in the
generatedImages dir since buildImages.py removes all
the previously generated files from older builds.
Thus the missing file will be detected in the html construction below thanks
to the -E option. 

To create html:
cd TheDirectoryWithSphinxConfIWantToUseForAdequateTemplate
sphinx-build options -b html sourceDir OutputDir
in an existing OutputDir



** Specificif procedure  

*** For a local construction:

#+BEGIN_SRC sh :results silent
cd  .
python3 buildImages.py
#+END_SRC

#+BEGIN_SRC sh :results output
cd  .
sphinx-build  -b html  -E -a .  ./html 2>&1 1>/dev/null
#+END_SRC

#+RESULTS:
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/docTemplate.rst: WARNING: document isn't included in any toctree
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/shortDeveloperDoc.rst: WARNING: document isn't included in any toctree






*** To publish on  the web :

#+BEGIN_SRC sh :dir /ssh:evain@localhost:
#to get the appropriate conf.py and appropriate theme, we first cd
cd  ~/subversion/sitesWeb/pro/ 
sphinx-build  -b html  -E ./  ./_build/html 
# _build/html is a link to public_html so no further move required
#+END_SRC

