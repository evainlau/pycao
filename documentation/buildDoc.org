Back to [[file:../pycao.org][the Org file]] 

* Architecture de la documentation

** ce qu'il faut a terme
- un tutoriel (plus ou moins done)
- des exemples (pas trop importan_t, yen a dans le tutoriel)
- un manuel de reference qui comporte
  la liste des classes, des classes derivees, des methodes pour chaques classe avec la doc de chaque classe et de chaque methode
  et un lien vers le code source (auto-documentation)

Pour le tutoriel, il faut pouvoir le verfifier, surtout si on l'etend. Le pb est qu'il y a plusieurs niveaux qui interagissent
( le code html, le code python pour ecrire le programme pycao qui contient lui meme deux sous-niveaux ( le preambule commun a tous
les codes pythons, le preambule/postambule du code python), le fichier povray, l'image.

Regle de base : tout doit etre ecrit dans un unique fichier python, sinon c'est pas gerable d'ecrire la doc au quotidien.
Et il faut une automatisation pour compiler. A voir comment ecrire  cette automatisation ( un module de sphinx-doc ou ascii-doctor ??)

Deuxieme regle de base : la recompilation ne doit recompiler que ce qui est modifiÃ©, car sinon c'est tres long et trop de choses a verifier.
- si le preambule est modifie, tout recompiler et montrer les fichiers pdf dans un latex
- si certains fichiers python sont modifies ne recompiler que le partie python
- si le fichier sphinx est modifie ( sous-entendu pas la partie pycao), ne recompiler que sphinx 


Mise en oeuvre possible:
################################################################
Format du fichier .py serait le suivant
################################################################

dessin=On
*nomDuFichier=nom1
#####################
#insertions de preambules divers
########################
*inclure preambule1
*inclure preambule 3

########################
#Construcion
######################
ligne1
ligne2
#show-on (instruction qui demande d'integrer dans le fichier html
ligne 3
ligne4
#show-off
ligne5
ligne6
#show-on
ligne7
ligne8
#show-off

###################
#insertion de postambules divers
#################
*inclure postambule un inclure postambule2 
dessin=off


retour au texte normal sphinx

dessin=on
*nomDufichier=... # toujours ajouter au fichier comme ca je peux couper un fichier en plusieurs points de la page
blabla
nomDuFichier=.... pour un autre fichier
dessin=off

################################################################
#Generation des fichiers a partir du code source
################################################################
Pour chaque fichier source:
- s'il n'est pas modifie, ne pas changer
- s'il est modifie' le couper en deux mettre une partie dans le code sphinx et une partie dans le code pycao
apres avoir au prealable bouge les anciens codes sphinx et pycao
- recompiler si necessaire le code sphinx ou le code pycao apres un diff avec la version ancienne

  Pour le code pycao:
- prendre tous les dessin on et les dessin off pour les mettre dans un fichier
- remplacer les preambule par ce qu'il faut
- couper les morceaux et les dispatcher au regarde de "nomDeFichier"
- faire le diff sur chacun de ces morceaux
- faire un fichier qui compare la vision pycao ancien avec le pycao nouveau et les affiche pour comparaison



* Generating the Doc
====================

** General procedure: 
-------------------------------
   + create images
   + create html

To create images, the script ./buildImages.py collects the .py
files in this directory and executes them : this creates the 
povray file and calls povray.  

The verbosity of povray generates a much too large output
to check that the python compilation was OK.
However, don't care. 
If some file is not generated, then it will not appear in the
generatedImages dir since buildImages.py removes all
the previously generated files from older builds.
Thus the missing file will be detected in the html construction below thanks
to the -E option. 

To create html:
cd TheDirectoryWithSphinxConfIWantToUseForAdequateTemplate
sphinx-build options -b html sourceDir OutputDir
in an existing OutputDir



** Specificif procedure  

*** For a local construction:

#+BEGIN_SRC sh :results silent
cd  .
python3 buildImages.py
#+END_SRC

#+BEGIN_SRC sh :results output
cd  .
sphinx-build  -b html  -E -a .  ./html 2>&1 1>/dev/null
#+END_SRC

#+RESULTS:
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/docTemplate.rst: WARNING: document isn't included in any toctree
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/shortDeveloperDoc.rst: WARNING: document isn't included in any toctree






*** To publish on  the web :

#+BEGIN_SRC sh :dir /ssh:evain@localhost:
#to get the appropriate conf.py and appropriate theme, we first cd
cd  ~/subversion/sitesWeb/pro/ 
sphinx-build  -b html  -E ./  ./_build/html 
# _build/html is a link to public_html so no further move required
#+END_SRC

