* Nomenclature des fichiers de doc  
- le nom du fichier .pov doit etre le nom du fichier.py + 1 chiffre ( exemple : file.py et file1.pov ou file23.py et file234.pov)
  ou le nom du fichier lui meme (file.py/file.pov)
- le nom du fichier .rst doit etre le nom du fichier.py moins un ou zero caractere ( ex: (file.py et fil.rst ou file.rst),  ou (file1.py et file.rst/file1.rst)
- les fichiers .png et .pov ont meme basename 

* Organisation de chaque fichier
- le fichier python cree le .pov  ( mais pas le  png genere' par make pour plus de souplesse)

- creer le fichier rst  en incluant le .py par des 
paragraphes du type:
    .. literalinclude:: genealogyAndCompounds1.py
         :start-after: bbloc1
	 :end-before: ebloc1

* structure de dependance du make 
- les html dependent des .rst dependent des .py
- les .png dependent des .pov qui dependent des .py

* entretien de la doc existante via le make 
DONE: 
- make pycao pycaofile=file.py : lance python3 sur file.py
- make pngs : lance make sur tous les png trouve's
- make html: lance sphinx 
TO BE DONE:
- make update = make png + make html
- make fromScratch = make pycao sur tous les .py+ make update
- make listmissingpng = cree la liste de png attendus et verifie en bash qu'ils sont plus recents que les pov correspondants.

* Compilation a la maison et a la fac

- Si on cd dans le directory documentation, le makefile apppelle sphinx qui fait un build dans documentation/_build/html
La difference est qu'a la fac, le buid/html est un pointeur vers public html ( a faire) 
Il y un fichier conf.py dans ce directory necessaire a sphinx-build
Pb a long terme : gerer ce conf.py versus le conf.py qui gere ma page perso dans son ensemble

* ce qu'il faut a terme
- un tutoriel (plus ou moins done)
- des exemples (pas trop importan_t, yen a dans le tutoriel)
- un manuel de reference qui comporte
  la liste des classes, des classes derivees, des methodes pour chaques classe avec la doc de chaque classe et de chaque methode
  et un lien vers le code source (auto-documentation)


* Generating the Doc
====================

THIS IS THE OLD PROCEDURE BEFORE THE CONSTRUCTION OF THE MAKEFILE

En particulier sphinx-build etait tres long car les fichiers rst 
etaient tous recompiles via l'option -E 

To create images, the script ./buildImages.py collects the .py
files in this directory and executes them : this creates the 
povray file and calls povray.  

The verbosity of povray generates a much too large output
to check that the python compilation was OK.
However, don't care. 
If some file is not generated, then it will not appear in the
generatedImages dir since buildImages.py removes all
the previously generated files from older builds.
Thus the missing file will be detected in the html construction below thanks
to the -E option. 

To create html:
cd TheDirectoryWithSphinxConfIWantToUseForAdequateTemplate
sphinx-build options -b html sourceDir OutputDir
in an existing OutputDir



** Specificif procedure  

*** For a local construction:

#+BEGIN_SRC sh :results silent
cd  .
python3 buildImages.py
#+END_SRC

#+BEGIN_SRC sh :results output
cd  .
sphinx-build  -b html  -E -a .  ./html 2>&1 1>/dev/null
#+END_SRC

#+RESULTS:
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/docTemplate.rst: WARNING: document isn't included in any toctree
: /home/laurent/subversion/articlesEtRechercheEnCours/pycao/pycaogit/documentation/shortDeveloperDoc.rst: WARNING: document isn't included in any toctree






*** To publish on  the web :

#+BEGIN_SRC sh :dir /ssh:evain@localhost:
#to get the appropriate conf.py and appropriate theme, we first cd
cd  ~/subversion/sitesWeb/pro/ 
sphinx-build  -b html  -E ./  ./_build/html 
# _build/html is a link to public_html so no further move required
#+END_SRC

